import { useState, useCallback } from "react";
import { Link, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { useToast } from "@/hooks/use-toast";
import { Eye, EyeOff, User, UserPlus, Mail } from "lucide-react";
import axios from "axios";
import Navigation from "@/components/Navigation";
import Footer from "@/components/Footer";
import ReCAPTCHA from "react-google-recaptcha";

const Register = () => {
  const [fullName, setFullName] = useState("");
  const [email, setEmail] = useState("");
  const [account, setAccount] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [agreeToTerms, setAgreeToTerms] = useState(false);
  const [recaptchaToken, setRecaptchaToken] = useState<string | null>(null);
  const [showOtpForm, setShowOtpForm] = useState(false);
  const [otp, setOtp] = useState("");
  const {
    toast
  } = useToast();
  const navigate = useNavigate();

  const handleRecaptchaChange = useCallback((value: string | null) => {
    setRecaptchaToken(value);
    console.log("reCAPTCHA value:", value);
  }, []);

  const validateForm = () => {
    if (!fullName.trim()) {
      toast({
        variant: "destructive",
        title: "L·ªói ‚ö†Ô∏è",
        description: "H·ªç v√† t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.",
        duration: 3000,
        className: "bg-red-500 text-white border border-red-700 shadow-lg p-4 rounded-md",
        action: (
          <Button
            variant="outline"
            className="bg-white text-red-500 hover:bg-red-100 border-red-500"
          >
            ƒê√≥ng
          </Button>
        ),
      });
      return false;
    }
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      toast({
        variant: "destructive",
        title: "L·ªói ‚ö†Ô∏è",
        description: "Email kh√¥ng h·ª£p l·ªá.",
        duration: 3000,
        className: "bg-red-500 text-white border border-red-700 shadow-lg p-4 rounded-md",
        action: (
          <Button
            variant="outline"
            className="bg-white text-red-500 hover:bg-red-100 border-red-500"
          >
            ƒê√≥ng
          </Button>
        ),
      });
      return false;
    }
    if (password.length < 8 || password.length > 40) {
      toast({
        variant: "destructive",
        title: "L·ªói ‚ö†Ô∏è",
        description: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª± v√† √≠t h∆°n 40 k√Ω t·ª±.",
        duration: 3000,
        className: "bg-red-500 text-white border border-red-700 shadow-lg p-4 rounded-md",
        action: (
          <Button
            variant="outline"
            className="bg-white text-red-500 hover:bg-red-100 border-red-500"
          >
            ƒê√≥ng
          </Button>
        ),
      });
      return false;
    }
    return true;
  };
  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    if (!validateForm()) {
      setIsLoading(false);
      return;
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u
    if (password !== confirmPassword) {
      toast({
        variant: "destructive",
        title: "M·∫≠t kh·∫©u kh√¥ng kh·ªõp",
        description: "Vui l√≤ng ki·ªÉm tra l·∫°i m·∫≠t kh·∫©u x√°c nh·∫≠n."
      });
      setIsLoading(false);
      return;
    }

    // Ki·ªÉm tra ƒë·ªìng √Ω ƒëi·ªÅu kho·∫£n
    if (!agreeToTerms) {
      toast({
        variant: "destructive",
        title: "Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n",
        description: "B·∫°n c·∫ßn ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n d·ªãch v·ª• v√† ch√≠nh s√°ch b·∫£o m·∫≠t."
      });
      setIsLoading(false);
      return;
    }

  if (!recaptchaToken) {
      toast({
        variant: "destructive",
        title: "Vui l√≤ng x√°c minh reCAPTCHA ‚ö†Ô∏è",
        description: "B·∫°n c·∫ßn x√°c minh r·∫±ng b·∫°n kh√¥ng ph·∫£i l√† bot.",
        duration: 3000,
        className: "bg-red-500 text-white border border-red-700 shadow-lg p-4 rounded-md",
        action: (
          <Button
            variant="outline"
            className="bg-white text-red-500 hover:bg-red-100 border-red-500"
          >
            ƒê√≥ng
          </Button>
        ),
      });
      setIsLoading(false);
      return;
    }

 // Ki·ªÉm tra ƒë·ªìng √Ω ƒëi·ªÅu kho·∫£n
 if (!agreeToTerms) {
  toast({
    variant: "destructive",
    title: "Vui l√≤ng ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n ‚ö†Ô∏è",
    description: "B·∫°n c·∫ßn ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n d·ªãch v·ª• v√† ch√≠nh s√°ch b·∫£o m·∫≠t.",
    duration: 3000,
    className: "bg-red-500 text-white border border-red-700 shadow-lg p-4 rounded-md",
    action: (
      <Button
        variant="outline"
        className="bg-white text-red-500 hover:bg-red-100 border-red-500"
      >
        ƒê√≥ng
      </Button>
    ),
  });
  setIsLoading(false);
  return;
}

try {
  const response = await axios.post("http://localhost:5261/api/XacThuc/DangKy", {
    hoTen: fullName,
    email,
    taiKhoan: account,
    matKhau: password,
  });

  toast({
    title: "Vui l√≤ng ki·ªÉm tra email üéâ",
    description: "ƒê·ªÉ k√≠ch ho·∫°t t√†i kho·∫£n c·ªßa b·∫°n",
    duration: 5000,
    className: "bg-green-500 text-white border border-green-700 shadow-lg p-4 rounded-md",
    action: (
      <Button
        variant="outline"
        className="bg-white text-green-500 hover:bg-green-100 border-green-500"
      >
        ƒê√≥ng
      </Button>
    ),
  });

  // Hi·ªÉn th·ªã form nh·∫≠p OTP
  setShowOtpForm(true);
} catch (error) {
  toast({
    variant: "destructive",
    title: "ƒêƒÉng k√Ω th·∫•t b·∫°i ‚ö†Ô∏è",
    description: error.response?.data?.message || "Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.",
    duration: 3000,
    className: "bg-red-500 text-white border border-red-700 shadow-lg p-4 rounded-md",
    action: (
      <Button
        variant="outline"
        className="bg-white text-red-500 hover:bg-red-100 border-red-500"
      >
        ƒê√≥ng
      </Button>
    ),
  });
} finally {
  setIsLoading(false);
}
};
const handleVerifyOtp = async (e: React.FormEvent) => {
  e.preventDefault();
  setIsLoading(true);

  try {
    const response = await axios.post("http://localhost:5261/api/XacThuc/VerifyOtpActivate", {
      email,
      otp,
    });

    toast({
      title: "K√≠ch ho·∫°t t√†i kho·∫£n th√†nh c√¥ng üéâ",
      description: response.data.message,
      duration: 5000,
      className: "bg-green-500 text-white border border-green-700 shadow-lg p-4 rounded-md",
      action: (
        <Button
          variant="outline"
          className="bg-white text-green-500 hover:bg-green-100 border-green-500"
        >
          ƒê√≥ng
        </Button>
      ),
    });

    // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
    navigate("/login");
  } catch (error) {
    toast({
      variant: "destructive",
      title: "X√°c minh th·∫•t b·∫°i ‚ö†Ô∏è",
      description: error.response?.data?.message || "Vui l√≤ng ki·ªÉm tra l·∫°i m√£ OTP.",
      duration: 3000,
      className: "bg-red-500 text-white border border-red-700 shadow-lg p-4 rounded-md",
      action: (
        <Button
          variant="outline"
          className="bg-white text-red-500 hover:bg-red-100 border-red-500"
        >
          ƒê√≥ng
        </Button>
      ),
    });
  } finally {
    setIsLoading(false);
  }
};
  // L∆∞u token v√†o localStorage (n·∫øu backend tr·∫£ v·ªÅ token)
  // if (token) {
  //   localStorage.setItem("token", token);
  // }

  return (
  <div className="min-h-screen flex flex-col bg-[#eaf2f5]/[0.31] rounded-3xl">
      <Navigation />
      
      <main className="flex-1 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-gradient-to-b from-background to-secondary/30">
        <div className="w-full max-w-md space-y-8 my-[50px]">
          <div className="text-center">
            <h1 className="text-4xl font-bold tracking-tight gradient-text" style={{ paddingBottom: '0.5rem' }}>ƒêƒÉng k√Ω</h1>
            <p className="mt-2 text-muted-foreground">
              T·∫°o t√†i kho·∫£n ƒë·ªÉ tr·∫£i nghi·ªám mua s·∫Øm tuy·ªát v·ªùi
            </p>
          </div>

          <div className="colorful-card p-6 rounded-lg shadow-lg">
          {!showOtpForm ? (
            <form className="space-y-6" onSubmit={handleRegister}>
              <div className="space-y-2">
                <Label htmlFor="fullName">H·ªç v√† t√™n</Label>
                <div className="relative">
                  <User className="absolute left-3 top-2.5 h-5 w-5 text-muted-foreground" />
                  <Input id="fullName" placeholder="H·ªç t√™n c·ªßa b·∫°n" type="text" value={fullName} onChange={e => setFullName(e.target.value)} className="pl-10" required />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <div className="relative">
                  <Mail className="absolute left-3 top-2.5 h-5 w-5 text-muted-foreground" />
                  <Input id="email" placeholder="xxxxxx@email.com" type="email" value={email} onChange={e => setEmail(e.target.value)} className="pl-10" required />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="account">T√†i kho·∫£n</Label>
                <div className="relative">
                <User className="absolute left-3 top-2.5 h-5 w-5 text-muted-foreground" />
                  <Input id="account" placeholder="T√†i kho·∫£n" type="text" value={account} onChange={e => setAccount(e.target.value)} className="pl-10" required />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="password">M·∫≠t kh·∫©u</Label>
                <div className="relative">
                  <Button type="button" variant="ghost" size="icon" className="absolute right-0 top-0" onClick={() => setShowPassword(!showPassword)}>
                    {showPassword ? <EyeOff className="h-5 w-5 text-muted-foreground" /> : <Eye className="h-5 w-5 text-muted-foreground" />}
                  </Button>
                  <Input id="password" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" type={showPassword ? "text" : "password"} value={password} onChange={e => setPassword(e.target.value)} required />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="confirmPassword">X√°c nh·∫≠n m·∫≠t kh·∫©u</Label>
                <div className="relative">
                  <Button type="button" variant="ghost" size="icon" className="absolute right-0 top-0" onClick={() => setShowConfirmPassword(!showConfirmPassword)}>
                    {showConfirmPassword ? <EyeOff className="h-5 w-5 text-muted-foreground" /> : <Eye className="h-5 w-5 text-muted-foreground" />}
                  </Button>
                  <Input id="confirmPassword" placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢" type={showConfirmPassword ? "text" : "password"} value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)} required />
                </div>
              </div>

              <div className="flex items-center">
                <input id="terms" type="checkbox" className="h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded" checked={agreeToTerms} onChange={e => setAgreeToTerms(e.target.checked)} required />
                <label htmlFor="terms" className="ml-2 block text-sm text-muted-foreground">
                  T√¥i ƒë·ªìng √Ω v·ªõi {" "}
                  <Link to="/" className="text-primary hover:underline">
                    ƒêi·ªÅu kho·∫£n d·ªãch v·ª•
                  </Link>{" "}
                  v√†{" "}
                  <Link to="/" className="text-primary hover:underline">
                    Ch√≠nh s√°ch b·∫£o m·∫≠t
                  </Link>
                </label>
              </div>

              <div className="space-y-2">
                <ReCAPTCHA
                  sitekey="6LdnYnMqAAAAAIqMXz4csz5Zw_kR3ARtWht9wjY2"
                  onChange={handleRecaptchaChange}
                />
              </div>

              <Button type="submit" className="w-full gradient-bg" disabled={isLoading}>
                  {isLoading ? (
                    "ƒêang x·ª≠ l√Ω..."
                  ) : (
                    <>
                      <UserPlus className="mr-2 h-4 w-4" /> ƒêƒÉng k√Ω
                    </>
                  )}
                </Button>
              </form>
          ) : (
              <form className="space-y-6" onSubmit={handleVerifyOtp}>
                <div className="space-y-2">
                  <Label htmlFor="otp">Nh·∫≠p m√£ OTP</Label>
                  <Input
                    id="otp"
                    placeholder="Nh·∫≠p m√£ OTP t·ª´ email"
                    type="text"
                    value={otp}
                    onChange={(e) => setOtp(e.target.value)}
                    required
                  />
                </div>

                <Button type="submit" className="w-full gradient-bg" disabled={isLoading}>
                  {isLoading ? "ƒêang x·ª≠ l√Ω..." : "X√°c minh OTP"}
                </Button>
              </form>
            )}
            {!showOtpForm && (      
            <div className="mt-6">
              <div className="relative">
                <div className="absolute inset-0 flex items-center">
                  <Separator className="w-full" />
                </div>
                <div className="relative flex justify-center text-xs uppercase">
                  <span className="bg-background px-2 text-muted-foreground">
                    Ho·∫∑c ƒëƒÉng k√Ω v·ªõi
                  </span>
                </div>
              </div>

              <div className="mt-6 flex justify-center gap-3">
                <Button variant="outline" type="button" className="hover-effect" style={{ width: '400px' }}>
                  <svg className="h-5 w-5 mr-2" viewBox="0 0 24 24">
                    <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4" />
                    <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853" />
                    <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z" fill="#FBBC05" />
                    <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335" />
                    <path d="M1 1h22v22H1z" fill="none" />
                  </svg>
                  Google
                </Button>
                {/* <Button variant="outline" type="button" className="hover-effect">
                  <svg className="h-5 w-5 mr-2" viewBox="0 0 24 24">
                    <path d="M22 12c0-5.523-4.477-10-10-10S2 6.477 2 12c0 4.991 3.657 9.128 8.438 9.878v-6.987h-2.54V12h2.54V9.797c0-2.506 1.492-3.89 3.777-3.89 1.094 0 2.238.195 2.238.195v2.46h-1.26c-1.243 0-1.63.771-1.63 1.562V12h2.773l-.443 2.89h-2.33v6.988C18.343 21.128 22 16.991 22 12z" fill="#1877F2" />
                    <path d="M15.893 14.89l.443-2.89h-2.773v-1.876c0-.791.387-1.562 1.63-1.562h1.26v-2.46s-1.144-.195-2.238-.195c-2.285 0-3.777 1.384-3.777 3.89V12h-2.54v2.89h2.54v6.988C11.331 21.965 11.664 22 12 22s.669-.035.997-.082v-6.988h2.896z" fill="white" />
                  </svg>
                  Facebook
                </Button> */}
              </div>
            </div>
            )}
          </div>

          <p className="text-center text-sm text-muted-foreground">
            ƒê√£ c√≥ t√†i kho·∫£n?{" "}
            <Link to="/login" className="font-semibold text-primary hover:underline">
              ƒêƒÉng nh·∫≠p
            </Link>
          </p>
        </div>
      </main>

      <Footer />
    </div>
  );
};
export default Register;